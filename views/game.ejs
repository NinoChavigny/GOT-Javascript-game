<%- include('header') -%>
  <%- include('navbar') -%>


    <div class="text-center" id="main"></div>



    <div class="toast-container position-fixed bottom-0 end-0 p-3">
      <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="180000">
        <div class="toast-header">
          <img src="/assets/chatbox.svg" width="20px" class="rounded me-2" alt="...">
          <strong class="me-auto">Chatbox</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          <pre id="messages" style="width: 90%; margin-left: 5%; height: 200px; overflow: scroll">
          </pre>
          <input type="text" id="messageBox" placeholder="Type your message here"
            style="display: block; width: 90%; margin-bottom: 10px; margin-left: 5%; padding: 10px;" />
          <button id="send" title="Send Message!" style="width: 90%; margin-left: 5%; height: 30px;">
            Send Message
          </button>
        </div>
      </div>
    </div>



    <script>
      ///Définition des éléments HTML pour la gestion du Chat
      const sendBtn = document.querySelector('#send');
      const messages = document.querySelector('#messages');
      const messageBox = document.querySelector('#messageBox');

      ///définition des variables générales à l'aide de EJS et des données renvoyées par le routeur

      let main = document.getElementById("main");
      var uid = JSON.parse("<%- JSON.stringify(uid) %>");
      var roomid = JSON.parse("<%- roomid %>");

      ///Création du client Websocket
      const ws = new WebSocket(`ws://<%- serverIPAddress %>:3000/${uid}`);

      ///Actions à l'ouverture du client websocket
      ws.onopen = function () {
        playing(uid, roomid);
      };

      ///Actions sur chaque message provenant du serveur WebSocket
      ws.onmessage = function (event) {
        div = "";
        console.log(event.data);
        let data = JSON.parse(event.data);


        if (data["msg"] == "infos") {
          keys = Object.keys(data["info"]["families"]);
          room_type = data["room_type"]
          values_arr = []

          ///Cas 1: Partie Non Lancée
          if (data["info"]["started"] == 0) {

            for (j = 0; j < keys.length; j++) {
              values_arr[j] = data["info"]["families"][keys[j]]["value"]
            }

            if (values_arr.some(item => item === uid)) {
              main.innerHTML = `<img src=/assets/map_clear.svg alt=FamSVG />`;

            }
            else {
              div += `<p class="text-center">Choose your family !</p>`

              fetch("/static/families.json")
                .then(response => response.json())
                .then(families => {
                  for (i = 0; i < room_type; i++) {
                    fam = families["reverse_families"][families["playable_families"][`${room_type}`][i]]
                    console.log(fam, data["info"]["families"][fam])
                    if (data["info"]["families"][fam]["value"] == 0) {
                      div += `<button id="families" onclick="family_choice('${fam}', '${uid}', '${roomid}')">
                          <div class="familyname">${fam}</div>
                          <img src=/assets/logos/${fam}_logo.svg alt=FamSVG />
                        </button>`;
                    }
                  }
                  main.innerHTML = div;
                })

            }

          }
          ///Partie lancée: Cas 2
          else {
            main.innerHTML = `<object class="border" id="svg_map" data="/assets/map.svg" type="image/svg+xml"></object>`;

            objet = document.getElementById("svg_map")
            objet.addEventListener('load', async function () {
              objContent = objet.contentDocument


              await fetch("/static/territory.json")
                .then(response => response.json())
                .then(territories => {
                  for (const item of territories) {
                    item_svg = objContent.getElementById(`svg_${item.fields.tag}`)
                    item_children = Array.from(item_svg.children)///.filter(node => node.nodeType === Node.ELEMENT_NODE);


                    for (let i = 1; i < item_children.length; i++) {
                      if (item_children[i].getAttribute('id') != `svg_${item.fields.tag}_anchor`) {

                        for (subchild of Array.from(item_children[i].children)) {

                          subchild_id = subchild.getAttribute('id');
                          if (subchild_id != `svg_${item.fields.tag}_neutral_round` && subchild_id != `svg_${item.fields.tag}_garrison_round` &&
                            subchild_id != `svg_${item.fields.tag}_neutral_text` && subchild_id != `svg_${item.fields.tag}_garrison_text`) {
                            subchild.setAttribute("display", "none")
                          }
                        }
                      }

                    }
                  }

                  for (const key of keys) {
                    for (territory of Object.keys(data["info"]["families"][key]["territory"])) {

                      territory_svg = objContent.getElementById(`svg_${territory}`)

                      territory_children = Array.from(territory_svg.childNodes).filter(node => node.nodeType === Node.ELEMENT_NODE);

                      for (let i = 1; i < territory_children.length; i++) {
                        for (subchild of Array.from(territory_children[i].children)) {

                          subchild.removeAttribute('display');
                        }
                      }




                      var result = territories.find(item => item.fields.tag === territory)

                      army_svg = territory_svg.querySelector(`#svg_${territory}_army`)

                      if (result.fields.type == 3 || result.fields.type == 1) {

                        pawn = army_svg.querySelector(`#svg_${territory}_nb_pawn`)
                        horse = army_svg.querySelector(`#svg_${territory}_nb_horse`)
                        tour = army_svg.querySelector(`#svg_${territory}_nb_tour`)
                        ship = army_svg.querySelector(`#svg_${territory}_nb_ship`)


                        pawn.querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["footmen"]
                        army_svg.querySelector(`#svg_${territory}_nb_pawn`).querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["footmen"]

                        horse.querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["knights"]
                        army_svg.querySelector(`#svg_${territory}_nb_horse`).querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["knights"]

                        tour.querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["engines"]
                        army_svg.querySelector(`#svg_${territory}_nb_horse`).querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["knights"]

                        if (result.fields.type == 3) {
                          ship.querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["ships"]
                          army_svg.querySelector(`#svg_${territory}_nb_tour`).querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["engines"]
                        }

                      }
                      else {
                        ship = army_svg.querySelector(`#svg_${territory}_nb_ship`)
                        ship.querySelector('tspan').innerHTML = data["info"]["families"][key]["territory"][`${territory}`]["ships"]
                      }

                    }
                  }



                })

            })
          }
        }

        if (data['msg'] == 'message') {
          showMessage(`${data['chat_name']} ►  ${data['message']}`);
        }

      };

      function playing(uid, roomid) {
        const msg = `["playing","${roomid}","${uid}"]`;

        ws.send(msg);
      }

      function family_choice(family, uid, roomid) {


        const msg = `["family_choice","${family}", "${uid}", "${roomid}"]`;

        ws.send(msg);
      }

      function chat() {
        const ChatTrigger = document.getElementById('Chat')
        const toastLiveExample = document.getElementById('liveToast')

        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample)
        toastBootstrap.show()
      }

      function showMessage(message) {
        messages.textContent += `\n${message}`;
        messages.scrollTop = messages.scrollHeight;
        messageBox.value = '';
      }

      sendBtn.onclick = function () {

        const msg = `["chat_message","${roomid}", "${messageBox.value}", "${uid}"]`;

        if (ws) {
          ws.send(msg);
        } else {
          alert("ERROR: Not connected... refresh to try again!");
        }
      }

      function buildMap() {




      }
    </script>

    <%- include('footer') -%>